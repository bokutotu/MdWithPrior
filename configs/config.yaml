# @package _global_

# specify here default training configuration
defaults:
  - _self_
  - optimizer: adam
  - scheduler: step
  - models: mlp
  - dataset: mlp
  - logger: mlflow
  - trainer: default

# global configurations
experiment_name: default
gpus: [0]
lr: 0.003
epochs: 50
batch_size: 64

train_test_rate: 0.75

# for CGnet
is_angle_prior: true
is_length_prior: true
is_dihedral_prior: true

# for cmap
grid_size: 50
sigma: 2
truncate: 4


is_normalize: false

# coordinates_path: /home/bokutotu/HDD/Lab/MdWithPrior/tests/data/ala2_coordinates.npy
# forces_path: /home/bokutotu/HDD/Lab/MdWithPrior/tests/data/ala2_forces.npy
coordinates_path: /home/bokutotu/HDD/Lab/data/NPY/c_trj.npy
forces_path: /home/bokutotu/HDD/Lab/data/NPY/f_trj.npy

# path to original working directory (that `run.py` was executed from in command line)
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have path to original work dir as a special variable
# read more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}


hydra:
    # output paths for hydra logs
    run:
        dir: /tmp/logs/runs/${now:%Y-%m-%d}/${now:%H:%M:%S}/${hydra.job.override_dirname}
    sweep:
        dir: logs/multiruns/${now:%Y-%m-%d}/${now:%H:%M:%S}/
        subdir: ${hydra.job.override_dirname}

    job:
      # you can set here environment variables that are universal for all users
      # for system specific variables (like data paths) it's better to use .env file!
      # env_set:
      config:
        # configuration for the ${hydra.job.override_dirname} runtime variable
        override_dirname:
          kv_sep: '='
          item_sep: '/'
